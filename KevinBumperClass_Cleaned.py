from latticeElements.elements import HalbachLensSimfrom SwarmTracerClass import SwarmTracerassert HalbachLensSim.fringeFracOuter == 1.5def add_Kevin_Bumper_Elements(PTL):  # creates an identical bumper, but does not end the lattice    # note, somewhere in the code you will need to specify the magnet grades for the lens    # the first magnet is N42 and the second N52    assert PTL.initialLocation[0] == 0.0 and PTL.initialLocation[1] == 0.0    PTL.initialLocation = (0, -0.0114)    PTL.add_Halbach_Lens_Sim((0.0242, 0.0372), 0.3020,                             magnetWidth=(0.0127, 0.01905))    PTL.add_Drift(0.3312, .04, inputTiltAngle=-0.1107, outputTiltAngle=-0.0167)    PTL.add_Halbach_Lens_Sim(0.0242, 0.1869, magnetWidth=0.0127)    PTL.add_Drift(0.182, .04)    return PTL#  the focus of the big collector magnet is 3 cm before the first magnet, so the initial swarm would look#  more likedef create_swarm(PTL, focus_offset, n):  # this should work    st = SwarmTracer(PTL)  # it seems like it needs a PTL to work    swarm = st.initialize_Simulated_Collector_Focus_Swarm(n)    for particle in swarm:        particle.obj_qi = particle.qi.copy()        t = (0.0372 * 1.5 + focus_offset-particle.qi[0]) / particle.pi[0]        particle.qi[0] = -10**-4        particle.qi[1] = particle.qi[1]+t*particle.pi[1]        particle.qi[2] = particle.qi[2]+t*particle.pi[2]    return swarm